#!/usr/bin/env ruby

require 'optparse'
require 'steg-client'
require 'thread'

# Default values
options = {
    :port               => '10001',
    :knockcode          => 'knock',
    :inputmethod        => 'Header',
    :inputmethodconfig  => 'Accept-Encoding',
    :outputmethod       => 'Header',
    :outputmethodconfig => 'X-Powered-By',
    :logfile            => '/dev/null',
    :key                => '1234567890ABCDEF1234567890ABCDEF',
    :iv                 => '1234567890ABCDEF',
    :verbose            => false,
    :lengthsize         => 3,
    :fieldsize          => 256,
}

# Load the configuration file
CONFIG_FILE = File.join(ENV['HOME'],'.stegclient.rc.yaml')
if File.file?(CONFIG_FILE) and File.readable?(CONFIG_FILE)
  config_options = YAML.load_file(CONFIG_FILE)
  options.merge!(config_options)
else
  File.open(CONFIG_FILE,'w') { |file| YAML::dump(options,file) }
  STDERR.puts "Initialized configuration file in #{CONFIG_FILE}"
end

# Parse the command line arguments
option_parser = OptionParser.new do |opts|
  opts.on('-m MESSAGE', 'Hidden message that will be sent to the server') do |message|
    options[:message] = message
  end
  opts.on('-f FILE', 'Send the contents of the text file to the server') do |file|
    options[:file] = file
  end
  opts.on('-i', '--interactive', 'Interactive mode, messages are read from stdin') do
    options[:interactive] = true
  end
  opts.on('-p PORT', 'Port where the steg-client proxy will listen to.') do |port|
    options[:port] = port
  end
  opts.on('-k KEY', 'Key for symmetric encryption') do |key|
    options[:key] = key
  end
  opts.on('-x', '--input-method INPUTMETHOD', 'Steganography method for input messages') do |inputmethod|
    options[:inputmethod] = inputmethod
  end
  opts.on('-y', '--input-method-config INPUTMETHODCONFIG', 'Steganography method configuration for input messages') do |inputmethodconfig|
    options[:inputmethodconfig] = inputmethodconfig
  end
  opts.on('-o', '--output-method OUTPUTMETHOD', 'Steganography method for output messages') do |outputmethod|
    options[:outputmethod] = outputmethod
  end
  opts.on('-u', '--output-method-config OUTPUTMETHODCONFIG', 'Steganography method configuration for output messages') do |outputmethodconfig|
    options[:outputmethodconfig] = outputmethodconfig
  end
  opts.on('-v', '--verbose', 'Print debug messages') do
    options[:verbose] = true
  end

end

option_parser.parse!

validator = Stegclient::ParameterValidator.new(options)
validator.validate


messages = Queue.new
responses = Queue.new
# If message was specified, we just put it on the queue and are finished
if options.key?(:message)
  messages << options[:message]
end

# If an input file was specified, put the whole content on the queue, line by line
if options.key?(:file)
  File.readlines(options[:file]).each do |line|
    messages << line
  end
end

# If interactive mode was specified, we launch a new thread that will ask for user input
if options.key?(:interactive)
  console = Stegclient::Console.new(messages, responses)
  console.start
end

puts 'Config parameters: ' + options.inspect if options[:verbose]
puts 'Message queue before launching server: ' + messages.inspect if options[:verbose]

controller = Stegclient::Controller.new(options, messages, responses)
controller.start_encoder
controller.start_decoder
controller.start_proxy




